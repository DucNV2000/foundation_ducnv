using System.IO;
using Pancake.ExLibEditor;
using UnityEditor;
using UnityEngine;

namespace PancakeEditor
{
    public static class UtilitiesGameServiceDrawer
    {
        public static void OnInspectorGUI()
        {
#if PANCAKE_LEADERBOARD
            Uniform.DrawInstalled("Leaderboard Version 2.0.0");
#endif
#if PANCAKE_CLOUDSAVE
            Uniform.DrawInstalled("CloudSave Version 3.1.0");
#endif

#if PANCAKE_GPGS
            Uniform.DrawInstalled("Google Play Game Version 11.0.1");
#endif

#if !PANCAKE_LEADERBOARD
            GUI.enabled = !EditorApplication.isCompiling;
            if (GUILayout.Button("Install Package Leaderboard", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                RegistryManager.Add("com.unity.services.leaderboards", "2.0.0");
                RegistryManager.Resolve();
            }

            GUI.enabled = true;
#endif

#if !PANCAKE_CLOUDSAVE
            GUI.enabled = !EditorApplication.isCompiling;
            if (GUILayout.Button("Install Package CloudSave", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                RegistryManager.Add("com.unity.services.cloudsave", "3.1.0");
                RegistryManager.Resolve();
            }

            GUI.enabled = true;
#endif

#if PANCAKE_CLOUDSAVE && !PANCAKE_GPGS
            GUI.enabled = !EditorApplication.isCompiling;
            if (GUILayout.Button("Install Google Play Game Service v11.01", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                const string path = "Assets/Plugins/Android/GooglePlayGamesManifest.androidlib";
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                const string gpgsManifestMeta = @"fileFormatVersion: 2
guid: 44f4150f398dc4f22b230f8c74866383
PluginImporter:
  externalObjects: {}
  serializedVersion: 2
  iconMap: {}
  executionOrder: {}
  defineConstraints: []
  isPreloaded: 0
  isOverridable: 0
  isExplicitlyReferenced: 0
  validateReferences: 1
  platformData:
  - first:
      : Any
    second:
      enabled: 0
      settings:
        Exclude Android: 0
        Exclude Editor: 0
        Exclude Linux: 0
        Exclude Linux64: 0
        Exclude LinuxUniversal: 0
        Exclude OSXIntel: 0
        Exclude OSXIntel64: 0
        Exclude OSXUniversal: 0
        Exclude WebGL: 0
        Exclude Win: 0
        Exclude Win64: 0
        Exclude iOS: 0
  - first:
      : Editor
    second:
      enabled: 0
      settings:
        CPU: AnyCPU
        OS: AnyOS
  - first:
      Android: Android
    second:
      enabled: 1
      settings:
        CPU: ARMv7
  - first:
      Any: 
    second:
      enabled: 1
      settings: {}
  - first:
      Editor: Editor
    second:
      enabled: 1
      settings:
        DefaultValueInitialized: true
  - first:
      Facebook: Win
    second:
      enabled: 0
      settings:
        CPU: AnyCPU
  - first:
      Facebook: Win64
    second:
      enabled: 0
      settings:
        CPU: AnyCPU
  - first:
      Standalone: Linux
    second:
      enabled: 1
      settings:
        CPU: x86
  - first:
      Standalone: Linux64
    second:
      enabled: 1
      settings:
        CPU: AnyCPU
  - first:
      Standalone: LinuxUniversal
    second:
      enabled: 1
      settings: {}
  - first:
      Standalone: OSXIntel
    second:
      enabled: 1
      settings:
        CPU: AnyCPU
  - first:
      Standalone: OSXIntel64
    second:
      enabled: 1
      settings:
        CPU: AnyCPU
  - first:
      Standalone: OSXUniversal
    second:
      enabled: 1
      settings: {}
  - first:
      Standalone: Win
    second:
      enabled: 1
      settings:
        CPU: AnyCPU
  - first:
      Standalone: Win64
    second:
      enabled: 1
      settings:
        CPU: AnyCPU
  - first:
      WebGL: WebGL
    second:
      enabled: 1
      settings: {}
  - first:
      iPhone: iOS
    second:
      enabled: 1
      settings:
        CompileFlags: 
        FrameworkDependencies: 
  userData: 
  assetBundleName: 
  assetBundleVariant: 
";
                if (!File.Exists(path + ".meta"))
                {
                    var writer = new StreamWriter(path + ".meta", false);
                    writer.Write(gpgsManifestMeta);
                    writer.Close();
                }

                const string manifest = @"<?xml version=""1.0"" encoding=""utf-8""?>
<!-- This file was automatically generated by the Google Play Games plugin for Unity
     Do not edit. -->
<manifest xmlns:android=""http://schemas.android.com/apk/res/android""
    package=""com.google.example.games.mainlibproj""
    android:versionCode=""1""
    android:versionName=""1.0"" >

     

    <application>

     

        <!-- The space in these forces it to be interpreted as a string vs. int -->
        <meta-data android:name=""com.google.android.gms.games.APP_ID""
            android:value=""\u003"" />

        <!-- Keep track of which plugin is being used -->
        <meta-data android:name=""com.google.android.gms.games.unityVersion""
            android:value=""\u0030.11.01"" />

        <activity android:name=""com.google.games.bridge.NativeBridgeActivity""
            android:theme=""@android:style/Theme.Translucent.NoTitleBar.Fullscreen"" />
    </application>
</manifest>";

                if (!File.Exists(path + "/AndroidManifest.xml"))
                {
                    var writer = new StreamWriter(path + "/AndroidManifest.xml", false);
                    writer.Write(manifest);
                    writer.Close();
                }

                const string properties = @"target=android-16
android.library=true
";
                const string propertiesMeta = @"fileFormatVersion: 2
guid: 6156f0fc2bafa4f0c86d61673c0068d0
DefaultImporter:
  userData: 
labels:
- gvh_v0.11.01
";

                if (!File.Exists(path + "/project.properties"))
                {
                    var writer = new StreamWriter(path + "/project.properties", false);
                    writer.Write(properties);
                    writer.Close();
                }

                if (!File.Exists(path + "/project.properties.meta"))
                {
                    var writer = new StreamWriter(path + "/project.properties.meta", false);
                    writer.Write(propertiesMeta);
                    writer.Close();
                }


                RegistryManager.Add("com.google.play.games", "https://github.com/pancake-llc/google-play-games.git#11.0.1");
                RegistryManager.Resolve();
            }

            GUI.enabled = true;
#endif

            GUILayout.FlexibleSpace();
#if PANCAKE_LEADERBOARD
            GUI.backgroundColor = Uniform.Red;
            if (GUILayout.Button("Uninstall Leaderboard", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                bool confirmDelete = EditorUtility.DisplayDialog("Uninstall Leaderboard", "Are you sure you want to uninstall leaderboard package ?", "Yes", "No");
                if (confirmDelete)
                {
                    RegistryManager.Remove("com.unity.services.leaderboards");
                    RegistryManager.Resolve();
                }
            }

            GUI.backgroundColor = Color.white;
#endif

#if PANCAKE_CLOUDSAVE
            GUI.backgroundColor = Uniform.Red;
            if (GUILayout.Button("Uninstall CloudSave", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                bool confirmDelete = EditorUtility.DisplayDialog("Uninstall CloudSave", "Are you sure you want to uninstall cloud save package ?", "Yes", "No");
                if (confirmDelete)
                {
                    RegistryManager.Remove("com.unity.services.cloudsave");
                    RegistryManager.Resolve();
                }
            }

            GUI.backgroundColor = Color.white;
#endif

#if PANCAKE_GPGS
            GUI.backgroundColor = Uniform.Red;
            if (GUILayout.Button("Uninstall Google Play Game", GUILayout.MaxHeight(Wizard.BUTTON_HEIGHT)))
            {
                bool confirmDelete =
 EditorUtility.DisplayDialog("Uninstall Google Play Game", "Are you sure you want to uninstall Google Play Game package ?", "Yes", "No");
                if (confirmDelete)
                {
                    FileUtil.DeleteFileOrDirectory(Path.Combine("Assets/Plugins/Android", "GooglePlayGamesManifest.androidlib"));
                    FileUtil.DeleteFileOrDirectory(Path.Combine("Assets/Plugins/Android", "GooglePlayGamesManifest.androidlib.meta"));
                    
                    RegistryManager.Remove("com.google.play.games");
                    RegistryManager.Resolve();
                }
            }

            GUI.backgroundColor = Color.white;
#endif
        }
    }
}